spring.debug=true
server.port=8081

## MySQL Database
spring.datasource.url=jdbc:mysql://mysql:3306/home-stack
spring.datasource.username=root
spring.datasource.password=password
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect

spring.jpa.show-sql = false
spring.jpa.hibernate.ddl-auto = update
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.id.new_generator_mappings=true

### DB Connection Pooling
#This property controls the maximum number of milliseconds that a client (that's you) will wait for a connection from the pool. If this time is exceeded without a connection becoming available, a SQLException will be thrown.
#Lowest acceptable connection timeout is 250 ms. Default: 30000 (30 seconds)
#maximum number of milliseconds that a client will wait for a connection
spring.datasource.hikari.connection-timeout=30000

#minimum number of idle connections maintained by HikariCP in a connection pool
# A list of all Hikari parameters with a good explanation is available on https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby
# This property controls the minimum number of idle connections that HikariCP tries to maintain in the pool. Default: same as maximumPoolSize
spring.datasource.hikari.minimum-idle=10

# This property controls the maximum size that the pool is allowed to reach, including both idle and in-use connections. Basically this value will determine the maximum number of actual connections to the database backend.
# Default: 10
spring.datasource.hikari.maximum-pool-size=10

# This property controls the maximum amount of time that a connection is allowed to sit idle in the pool. This setting only applies when minimumIdle is defined to be less than maximumPoolSize
# Default: 600000 (10 minutes)
# Ideally this value should be lesser than timeout configured on DB
spring.datasource.hikari.idle-timeout=600000

# This property controls the maximum lifetime of a connection in the pool. An in-use connection will never be retired, only when it is closed will it then be removed.
# Default: 1800000 (30 minutes)
spring.datasource.hikari.max-lifetime=1800000




spring.batch.initialize-schema=always

flyway.locations=~/test
flyway.baselineOnMigrate=true

flyway.enabled=false

# udp host for sender. By default Jaeger libraries use a UDP sender to report finished spans to the jaeger-agent daemon
opentracing.jaeger.udp-sender.host=jaeger-agent
opentracing.jaeger.udp-sender.port=6831
# logs the spans in console
opentracing.jaeger.log-spans=true

# ---------------------- IOT Core -----------------------------
iot.mqtt.enable=true
iot.mqtt.host=arktr4szflm0y-ats.iot.ap-south-1.amazonaws.com
iot.mqtt.port=8883
iot.secure.keystore-file-path-type=ABSOLUTE
iot.secure.keystore-file=/home/alok/keystore.jks
iot.secure.truststore-file-path-type=ABSOLUTE
iot.secure.truststore-file=/home/alok/trustore.jks


